#pragma once

#include <pybind11/pybind11.h>
#include <pybind11/numpy.h>
#include <complex>
#include <cmath>
#include <vector>

namespace py = pybind11;

class FFTPower
{
private:
    const static int ndim = 3; // Only support 3-dimension
    std::vector<double> boxSize;

    int FindBin(double value, py::array_t<double>& array, double edgePrecision=1e-8, bool right=false);
    void CountNumberCore(py::array_t<int>& numbers, py::array_t<double>& k_array, py::array_t<double>& mu_array, py::array_t<double>& k_x_array, py::array_t<double>& k_y_array, py::array_t<double>& k_z_array, int threads=1);

public:
    FFTPower(py::array_t<double>& boxSize);
    void CountNumber(py::array_t<int>& numbers, py::array_t<double>& k_array, py::array_t<double>& mu_array, py::array_t<double>& k_x_array, py::array_t<double>& k_y_array, py::array_t<double>& k_z_array, int threads=1);
    void RunFromComplex(py::array_t<std::complex<double>>& power, py::array_t<double>& power_mu, py::array_t<double>& power_k, py::array_t<bool>& power_nan, py::array_t<std::complex<float>>& complex_field, py::array_t<double>& k_array, py::array_t<double>& mu_array, py::array_t<double>& k_x_array, py::array_t<double>& k_y_array, py::array_t<double>& k_z_array, std::string mode = "1d", int threads=1);
};