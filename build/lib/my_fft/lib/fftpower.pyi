import numpy

class FFTPower_CPP:
    def __init__(self, arg0: numpy.ndarray[numpy.float64]) -> None: ...
    def CountNumber(self, numbers: numpy.ndarray[numpy.int32], k_array: numpy.ndarray[numpy.float64], mu_array: numpy.ndarray[numpy.float64], k_x_array: numpy.ndarray[numpy.float64], k_y_array: numpy.ndarray[numpy.float64], k_z_array: numpy.ndarray[numpy.float64], threads: int = ...) -> None: ...
    def Digitize(self, bins: numpy.ndarray[numpy.int32], values: numpy.ndarray[numpy.float64], array: numpy.ndarray[numpy.float64], right: bool = ..., linear: bool = ..., threads: int = ...) -> None: ...
    def IsConj(self) -> bool: ...
    def RunFFTPower(self, power: numpy.ndarray[numpy.complex128], power_mu: numpy.ndarray[numpy.float64], power_k: numpy.ndarray[numpy.float64], power_modes: numpy.ndarray[numpy.int32], ps_3d: numpy.ndarray[numpy.complex64], k_array: numpy.ndarray[numpy.float64], mu_array: numpy.ndarray[numpy.float64], k_min: float, k_max: float, k_x_array: numpy.ndarray[numpy.float64], k_y_array: numpy.ndarray[numpy.float64], k_z_array: numpy.ndarray[numpy.float64], mode: str = ..., right: bool = ..., linear: bool = ..., nthreads: int = ...) -> None: ...
    def RunPS3D(self, complex_field: numpy.ndarray[numpy.complex64], nthreads: int = ...) -> None: ...
