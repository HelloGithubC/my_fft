from _typeshed import Incomplete
from scipy.fft import irfftn as irfftn

class FFTPowerCPP:
    Nmesh: Incomplete
    BoxSize: Incomplete
    attrs: Incomplete
    power: Incomplete
    fft: Incomplete
    is_deal: bool
    is_run_ps_3d: bool
    def __init__(self, Nmesh, BoxSize, shotnoise: float = 0.0) -> None: ...
    def runPS3D(self, field, nthreads: int = 1) -> None: ...
    done_conj: bool
    def run(self, field, kmin, kmax, dk, Nmu: Incomplete | None = None, k_arrays: Incomplete | None = None, mode: str = '1d', field_type: str = 'complex', right: bool = False, linear: bool = True, run_ps_3d: bool = True, nthreads: int = 1): ...
    def save(self, filename) -> None: ...
    @classmethod
    def load(cls, filename): ...

class Mesh:
    Nmesh: Incomplete
    BoxSize: Incomplete
    attrs: Incomplete
    is_run: bool
    real_field: Incomplete
    complex_field: Incomplete
    mesh: Incomplete
    ndim: int
    def __init__(self, Nmesh, BoxSize) -> None: ...
    def is_structured_array(self, arr): ...
    def save(self, output_dir, mode: str = 'complex') -> None: ...
    @classmethod
    def load(cls, input_dir, mode: str = 'complex'): ...
    def run_cic(self, data, position: str = 'Position', weight: Incomplete | None = None, field_dtype=..., norm: bool = False, nthreads: int = 1): ...
    def r2c(self, field, compensated: bool = False, nthreads: int = 1): ...
